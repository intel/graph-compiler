diff --git a/mlir/lib/Dialect/Linalg/Transforms/BlockPackMatmul.cpp b/mlir/lib/Dialect/Linalg/Transforms/BlockPackMatmul.cpp
index 91d4efa3372b..f3f61ff92140 100644
--- a/mlir/lib/Dialect/Linalg/Transforms/BlockPackMatmul.cpp
+++ b/mlir/lib/Dialect/Linalg/Transforms/BlockPackMatmul.cpp
@@ -210,6 +210,19 @@ linalg::blockPackMatmul(RewriterBase &rewriter, linalg::LinalgOp linalgOp,
   packedMatmul->packOps[1] = packedRhs->transposedPackOp;
   packedMatmul->packedLinalgOp = packedRhs->transposedLinalgOp;
 
+  // rewrite generic to mmt4d
+  if (!options->lhsTransposeOuterBlocks && !options->lhsTransposeInnerBlocks &&
+      options->rhsTransposeOuterBlocks && options->rhsTransposeInnerBlocks &&
+      options->mnkOrder == SmallVector<int64_t>{0, 1, 2}) {
+    auto originalLinalgOp = packedMatmul->packedLinalgOp;
+    rewriter.setInsertionPoint(originalLinalgOp);
+    auto mmt4d = rewriter.create<linalg::Mmt4DOp>(
+        originalLinalgOp.getLoc(), originalLinalgOp.getDpsInits().getTypes(),
+        originalLinalgOp.getDpsInputs(), originalLinalgOp.getDpsInits());
+    rewriter.replaceOp(originalLinalgOp, mmt4d);
+    packedMatmul->packedLinalgOp = mmt4d;
+  }
+
   return packedMatmul;
 }
 
@@ -307,6 +320,7 @@ struct LinalgBlockPackMatmul
 };
 } // namespace
 
+// extend to transform to mmt4d or batch_mmt4d
 void linalg::populateBlockPackMatmulPatterns(
     RewritePatternSet &patterns, const ControlBlockPackMatmulFn &controlFn) {
   patterns.add<BlockPackMatmul<linalg::GenericOp>,
